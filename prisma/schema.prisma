generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum TransactionType {
  ACHAT
  VENTE
}

model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String                 @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  role                     UserRole               @default(USER)
  accounts                 Account[]
  portfolios               Portfolio[]
  isTwoFactorAuthenticated Boolean                @default(false)
  twoFactorConfirmation    TwoFactorConfirmation?

  watchlist Watchlist?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Coin {
  CoinId       String          @id @default(cuid())
  watchlists   WatchlistCoin[]
  transactions Transaction[]
}

model Watchlist {
  id     String          @id @default(uuid())
  userId String          @unique
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  coins  WatchlistCoin[]
}

model WatchlistCoin {
  id          String    @id @default(uuid())
  watchlistId String
  coinId      String
  coin        Coin      @relation(fields: [coinId], references: [CoinId], onDelete: Cascade)
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, coinId])
}

model Portfolio {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  description  String?
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id             String          @id @default(uuid())
  portfolioId    String
  portfolio      Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  coinId         String
  coin           Coin            @relation(fields: [coinId], references: [CoinId], onDelete: Cascade)
  quantityCrypto Float
  amountUsd      Float
  type           TransactionType
  pricePerCoin   Float
  fees           Float?
  note           String?
  date           DateTime        @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
